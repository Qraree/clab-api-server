definitions:
  models.CACreateRequest:
    properties:
      commonName:
        description: Defaults to "containerlab.dev"
        example: ca.example.com
        type: string
      country:
        description: Defaults to "Internet"
        example: US
        type: string
      expiry:
        description: Duration string, defaults to "87600h" (10 years)
        example: 8760h
        type: string
      locality:
        description: Defaults to "Server"
        example: City
        type: string
      name:
        description: Defaults to "ca" if empty
        example: my-root-ca
        type: string
      orgUnit:
        description: Defaults to "Containerlab Tools"
        example: IT
        type: string
      organization:
        description: Defaults to "Containerlab"
        example: MyOrg
        type: string
    type: object
  models.CPUMetrics:
    properties:
      loadAvg1:
        description: 1-minute load average
        type: number
      loadAvg5:
        description: 5-minute load average
        type: number
      loadAvg15:
        description: 15-minute load average
        type: number
      numCPU:
        description: Number of CPUs/cores
        type: integer
      processPercent:
        description: This process's CPU usage
        type: number
      usagePercent:
        description: Overall CPU usage percentage
        type: number
    type: object
  models.CertResponse:
    properties:
      certPath:
        description: e.g., "my-root-ca/my-root-ca.pem" or "my-root-ca/node1.example.com.pem"
        type: string
      csrPath:
        description: e.g., "my-root-ca/my-root-ca.csr" or "my-root-ca/node1.example.com.csr"
        type: string
      keyPath:
        description: e.g., "my-root-ca/my-root-ca.key" or "my-root-ca/node1.example.com.key"
        type: string
      message:
        type: string
    type: object
  models.CertSignRequest:
    properties:
      caName:
        description: Name of the CA cert/key files (without .pem/.key) previously
          generated
        example: my-root-ca
        type: string
      commonName:
        description: Defaults to Name if empty
        example: node1.example.com
        type: string
      country:
        description: Defaults to "Internet"
        example: US
        type: string
      hosts:
        description: SANs (DNS names or IPs), comma-separated in clab, array here
        items:
          type: string
        type: array
      keySize:
        description: Defaults to 2048
        example: 4096
        type: integer
      locality:
        description: Defaults to "Server"
        example: City
        type: string
      name:
        description: Required
        example: node1.example.com
        type: string
      orgUnit:
        description: Defaults to "Containerlab Tools"
        example: Nodes
        type: string
      organization:
        description: Defaults to "Containerlab"
        example: MyOrg
        type: string
    required:
    - caName
    - hosts
    - name
    type: object
  models.ClabContainerInfo:
    properties:
      absLabPath:
        description: Absolute path to topology file
        type: string
      container_id:
        description: Docker container ID (short)
        type: string
      group:
        description: Group assigned in topology (Might not always be present)
        type: string
      image:
        description: Container image used
        type: string
      ipv4_address:
        description: Management IPv4 Address/Mask
        type: string
      ipv6_address:
        description: Management IPv6 Address/Mask
        type: string
      kind:
        description: e.g., "linux", "nokia_srlinux"
        type: string
      lab_name:
        description: Name of the lab this node belongs to (redundant with map key
          but present)
        type: string
      labPath:
        description: Path to the topology file used (relative)
        type: string
      name:
        description: Name of the container node (e.g., "lab01-client1")
        type: string
      owner:
        description: OS user from clab inspect output (Used for authorization)
        type: string
      state:
        description: e.g., "running"
        type: string
      status:
        description: e.g., "Up 18 hours"
        type: string
    type: object
  models.ClabExecInternalResult:
    properties:
      cmd:
        description: The command and its arguments as executed
        items:
          type: string
        type: array
      return-code:
        description: Exit code of the command inside the container
        type: integer
      stderr:
        description: Standard error of the command
        type: string
      stdout:
        description: Standard output of the command
        type: string
    type: object
  models.ClabInspectOutput:
    additionalProperties:
      items:
        $ref: '#/definitions/models.ClabContainerInfo'
      type: array
    type: object
  models.DeployRequest:
    properties:
      topologyContent:
        description: "Option 1: Direct Topology Content.\nProvide the full containerlab
          topology YAML as a json string.\nIf this is provided, 'topologySourceUrl'
          MUST be empty.\n{\n\t\"topologyContent\": {\n\t  \"name\": \"your-lab-name\",\n\t
          \ \"topology\": {\n\t\t\"kinds\": {\n\t\t  \"nokia_srlinux\": {\n\t\t\t\"type\":
          \"ixrd3\",\n\t\t\t\"image\": \"ghcr.io/nokia/srlinux\"\n\t\t  }\n\t\t},\n\t\t\"nodes\":
          {\n\t\t  \"srl1\": {\n\t\t\t\"kind\": \"nokia_srlinux\"\n\t\t  },\n\t\t
          \ \"srl2\": {\n\t\t\t\"kind\": \"nokia_srlinux\"\n\t\t  }\n\t\t},\n\t\t\"links\":
          [\n\t\t  {\n\t\t\t\"endpoints\": [\n\t\t\t  \"srl1:e1-1\",\n\t\t\t  \"srl2:e1-1\"\n\t\t\t]\n\t\t
          \ }\n\t\t]\n\t  }\n\t}\n  }"
        type: object
      topologySourceUrl:
        description: |-
          Option 2: Remote Topology Source URL.
          Provide a URL to a Git repository, a specific .clab.yml file in Git (github/gitlab), or a raw HTTP(S) URL.
          If this is provided, 'topologyContent' MUST be empty.
        type: string
    type: object
  models.DisableTxOffloadRequest:
    properties:
      containerName:
        example: clab-my-lab-srl1
        type: string
    required:
    - containerName
    type: object
  models.DiskMetrics:
    properties:
      freeDisk:
        description: Free disk space in bytes
        type: integer
      path:
        description: Mount path (usually "/")
        type: string
      totalDisk:
        description: Total disk space in bytes
        type: integer
      usagePercent:
        description: Disk usage percentage
        type: number
      usedDisk:
        description: Used disk space in bytes
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.ExecRequest:
    properties:
      command:
        example: ip addr show eth1
        type: string
    required:
    - command
    type: object
  models.ExecResponse:
    additionalProperties:
      items:
        $ref: '#/definitions/models.ClabExecInternalResult'
      type: array
    type: object
  models.GenerateNodeTier:
    properties:
      count:
        description: Number of nodes in this tier
        example: 4
        minimum: 1
        type: integer
      kind:
        description: Node kind (defaults to 'srl'/'nokia_srlinux' if omitted)
        example: nokia_srlinux
        type: string
      type:
        description: Node type within the kind
        example: ixrd3
        type: string
    required:
    - count
    type: object
  models.GenerateRequest:
    properties:
      defaultKind:
        example: nokia_srlinux
        type: string
      deploy:
        example: true
        type: boolean
      groupPrefix:
        example: clos-tier
        type: string
      images:
        additionalProperties:
          type: string
        example:
          nokia_srlinux: ghcr.io/nokia/srlinux:latest
        type: object
      ipv4Subnet:
        example: 172.20.20.0/24
        type: string
      ipv6Subnet:
        example: 2001:172:20:20::/64
        type: string
      licenses:
        additionalProperties:
          type: string
        example:
          nokia_srlinux: /opt/licenses/srl.lic
        type: object
      managementNetwork:
        example: clos-mgmt
        type: string
      maxWorkers:
        example: 4
        type: integer
      name:
        example: 3-tier-clos
        type: string
      nodePrefix:
        example: clos-node
        type: string
      outputFile:
        example: clos.yml
        type: string
      tiers:
        items:
          $ref: '#/definitions/models.GenerateNodeTier'
        minItems: 1
        type: array
    required:
    - name
    - tiers
    type: object
  models.GenerateResponse:
    properties:
      deployOutput:
        description: |-
          The output from the deploy command (only if Deploy=true). Can be JSON or plain text.
          Use swaggertype:"object" to represent json.RawMessage in Swagger.
        type: object
      message:
        description: Message indicating success or failure.
        type: string
      savedFilePath:
        description: Path where the file was saved (if Deploy=true, it's the path
          in the user's ~/.clab dir; if Deploy=false, it's the OutputFile path if
          provided).
        type: string
      topologyYaml:
        description: The generated topology YAML (only if Deploy=false and OutputFile
          is empty).
        type: string
    type: object
  models.GenericSuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.HealthResponse:
    properties:
      startTime:
        description: When the server started
        type: string
      status:
        description: '"healthy" or other status indicators'
        type: string
      uptime:
        description: Human-readable uptime
        type: string
      version:
        description: API server version
        type: string
    type: object
  models.InterfaceInfo:
    properties:
      alias:
        description: Interface alias (e.g., "ethernet-1/1", "" if none)
        type: string
      ifindex:
        description: Interface index
        type: integer
      mac:
        description: MAC Address
        type: string
      mtu:
        description: MTU size
        type: integer
      name:
        description: Interface name (e.g., "eth0", "e1-1")
        type: string
      state:
        description: Interface state (e.g., "up", "down", "unknown")
        type: string
      type:
        description: Interface type (e.g., "veth", "device", "dummy")
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.LogsResponse:
    properties:
      containerName:
        type: string
      logs:
        type: string
    type: object
  models.MemMetrics:
    properties:
      availableMem:
        description: Available memory in bytes
        type: integer
      processMemMB:
        description: This process's memory in MB
        type: number
      processMemPct:
        description: This process's memory percentage
        type: number
      totalMem:
        description: Total physical memory in bytes
        type: integer
      usagePercent:
        description: Memory usage percentage
        type: number
      usedMem:
        description: Used physical memory in bytes
        type: integer
    type: object
  models.Metrics:
    properties:
      cpu:
        allOf:
        - $ref: '#/definitions/models.CPUMetrics'
        description: CPU usage metrics
      disk:
        allOf:
        - $ref: '#/definitions/models.DiskMetrics'
        description: Disk usage metrics
      mem:
        allOf:
        - $ref: '#/definitions/models.MemMetrics'
        description: Memory usage metrics
    type: object
  models.MetricsResponse:
    properties:
      metrics:
        allOf:
        - $ref: '#/definitions/models.Metrics'
        description: Detailed system metrics
      serverInfo:
        allOf:
        - $ref: '#/definitions/models.ServerInfo'
        description: Basic server information
    type: object
  models.NetemInterfaceInfo:
    properties:
      corruption:
        description: Percentage (might be missing in older clab versions)
        type: number
      delay:
        description: Duration string or empty
        type: string
      interface:
        description: Interface name
        type: string
      jitter:
        description: Duration string or empty
        type: string
      packet_loss:
        description: Percentage
        type: number
      rate:
        description: Kbit/s
        type: integer
    type: object
  models.NetemSetRequest:
    properties:
      corruption:
        description: Percentage (0.0 to 100.0)
        example: 0.1
        type: number
      delay:
        description: Duration string (e.g., "100ms", "1s")
        example: 50ms
        type: string
      jitter:
        description: Duration string, requires Delay
        example: 5ms
        type: string
      loss:
        description: Percentage (0.0 to 100.0)
        example: 10.5
        type: number
      rate:
        description: Kbit/s (non-negative integer)
        example: 1000
        type: integer
    type: object
  models.NetemShowResponse:
    additionalProperties:
      items:
        $ref: '#/definitions/models.NetemInterfaceInfo'
      type: array
    type: object
  models.NodeInterfaceInfo:
    properties:
      interfaces:
        items:
          $ref: '#/definitions/models.InterfaceInfo'
        type: array
      name:
        description: Name of the container node
        type: string
    type: object
  models.PasswordChangeRequest:
    properties:
      currentPassword:
        description: Required if not superuser
        type: string
      newPassword:
        type: string
    required:
    - newPassword
    type: object
  models.SSHAccessRequest:
    properties:
      duration:
        description: How long the access should be valid for (e.g., "1h", "30m")
        type: string
      port:
        description: Which device internal port should be opened
        type: string
      sshUsername:
        description: Optional override for container's SSH user
        type: string
    type: object
  models.SSHAccessResponse:
    properties:
      command:
        description: Example SSH command
        type: string
      expiration:
        description: When this access expires
        type: string
      host:
        description: API server's hostname or IP
        type: string
      port:
        description: Allocated port on API server
        type: integer
      username:
        description: Username to use for SSH
        type: string
    type: object
  models.SSHSessionInfo:
    properties:
      created:
        description: When this access was created
        type: string
      expiration:
        description: When this access expires
        type: string
      labName:
        description: Lab name
        type: string
      nodeName:
        description: Node name
        type: string
      port:
        description: Allocated port on API server
        type: integer
      username:
        description: SSH username
        type: string
    type: object
  models.SaveConfigResponse:
    properties:
      message:
        description: Message indicating overall success.
        type: string
      output:
        description: Detailed output from the 'clab save' command (often from stderr).
        type: string
    type: object
  models.ServerInfo:
    properties:
      startTime:
        description: When the server started
        type: string
      uptime:
        description: Human-readable uptime
        type: string
      version:
        description: API server version
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      displayName:
        type: string
      groups:
        items:
          type: string
        type: array
      isSuperuser:
        type: boolean
      password:
        type: string
      shell:
        description: Default to /bin/bash if empty
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserDetails:
    properties:
      displayName:
        description: Full name from GECOS field
        type: string
      gid:
        type: string
      groups:
        items:
          type: string
        type: array
      homeDir:
        type: string
      isApiUser:
        type: boolean
      isSuperuser:
        type: boolean
      shell:
        type: string
      uid:
        type: string
      username:
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      displayName:
        type: string
      groups:
        items:
          type: string
        type: array
      isSuperuser:
        type: boolean
      shell:
        type: string
    type: object
  models.VersionCheckResponse:
    properties:
      checkResult:
        description: Raw output string from 'clab version check'.
        example: "\U0001F389 A newer containerlab version (0.62.2) is available!\nRelease
          notes: https://containerlab.dev/rn/0.62/#0622\nRun 'sudo clab version upgrade'
          or see https://containerlab.dev/install/ for installation options."
        type: string
    type: object
  models.VersionResponse:
    properties:
      versionInfo:
        description: Raw output string from 'clab version'.
        example: |-
          version: 0.50.0
          commit: 1234abcd
          date: 2024-01-15T10:00:00Z
          github: https://github.com/srl-labs/containerlab
          release notes: https://containerlab.dev/rn/0.50/
        type: string
    type: object
  models.VethCreateRequest:
    properties:
      aEndpoint:
        description: |-
          Endpoint A definition. Format: <node-name>:<interface-name> OR <kind>:<node-name>:<interface-name>
          Example: "clab-demo-node1:eth1" or "bridge:br-1:br-eth1" or "host:veth-eth1"
        example: clab-demo-node1:eth1
        type: string
      bEndpoint:
        description: |-
          Endpoint B definition. Format: <node-name>:<interface-name> OR <kind>:<node-name>:<interface-name>
          Example: "clab-demo-node2:eth1" or "ovs-bridge:ovsbr-1:br-eth1"
        example: clab-demo-node2:eth1
        type: string
      mtu:
        description: MTU for the vEth pair. Defaults to 9500 if omitted.
        example: 1500
        type: integer
    required:
    - aEndpoint
    - bEndpoint
    type: object
  models.VxlanCreateRequest:
    properties:
      dev:
        description: 'Optional: Linux device to use for the tunnel source. Auto-detected
          if omitted.'
        example: eth0
        type: string
      id:
        description: VxLAN Network Identifier (VNI). Defaults to 10 if omitted.
        example: 100
        type: integer
      link:
        description: Name of the existing interface in the root namespace to bridge
          traffic with.
        example: srl_e1-1
        type: string
      mtu:
        description: 'Optional: MTU for the VxLAN interface. Auto-calculated if omitted.'
        example: 1400
        type: integer
      port:
        description: UDP port number for the VxLAN tunnel. Defaults to 14789 if omitted.
        example: 4789
        type: integer
      remote:
        description: Remote VTEP IP address.
        example: 10.0.0.20
        type: string
    required:
    - link
    - remote
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: https://swagger.io/support/
  description: This is an API server to interact with Containerlab for authenticated
    Linux users. Runs clab commands as the API server's user. Requires PAM for authentication.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Containerlab API
  version: "1.0"
paths:
  /api/v1/generate:
    post:
      consumes:
      - application/json
      description: |-
        Generates a containerlab topology file based on CLOS definitions. Optionally deploys it, setting the owner to the authenticated user.
        Deployment is DENIED if a lab with the target name already exists.
        The 'images' and 'licenses' fields expect a map where the key is the node 'kind' and the value is the corresponding image or license path (e.g., {"nokia_srlinux": "ghcr.io/..."}).
        If Deploy=true, the topology is saved to the user's ~/.clab/<labName>/ directory before deployment, and the 'outputFile' field is ignored.
        If Deploy=false and 'outputFile' is empty, YAML is returned directly.
        If Deploy=false and 'outputFile' is set, the file is saved to that path on the server (requires API server write permissions).
      parameters:
      - description: Topology generation parameters. The 'images' field maps kind
          to image path.
        in: body
        name: generate_request
        required: true
        schema:
          $ref: '#/definitions/models.GenerateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Generation successful (YAML or deploy output)
          schema:
            $ref: '#/definitions/models.GenerateResponse'
        "400":
          description: Invalid input parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict (Lab already exists and Deploy=true)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate Topology
      tags:
      - Topology Generation
  /api/v1/health/metrics:
    get:
      description: Returns detailed CPU, memory, and disk metrics for the API server.
        Requires SUPERUSER privileges.
      produces:
      - application/json
      responses:
        "200":
          description: System metrics
          schema:
            $ref: '#/definitions/models.MetricsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error gathering metrics
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Detailed System Metrics
      tags:
      - Health
  /api/v1/labs:
    get:
      description: Get details about all running labs, filtered by the 'owner' field
        matching the authenticated user (unless user is in SUPERUSER_GROUP).
      produces:
      - application/json
      responses:
        "200":
          description: Filtered JSON output from 'clab inspect --all'
          schema:
            $ref: '#/definitions/models.ClabInspectOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List All Labs
      tags:
      - Labs
    post:
      consumes:
      - application/json
      description: |-
        Deploys a containerlab topology. Requires EITHER 'topologyContent' OR 'topologySourceUrl' in the request body, but not both. The lab will be owned by the authenticated user.
        The 'topologyContent' field accepts a JSON object for the topology structure.
        Deployment is DENIED if a lab with the target name already exists, UNLESS 'reconfigure=true' is specified AND the authenticated user owns the existing lab.
        Optional deployment flags are provided as query parameters.
      parameters:
      - description: 'Deployment Source: Provide ''topologyContent'' OR ''topologySourceUrl''.'
        in: body
        name: deploy_request
        required: true
        schema:
          $ref: '#/definitions/models.DeployRequest'
      - description: 'Allow overwriting an existing lab IF owned by the user (default:
          false).'
        in: query
        name: reconfigure
        type: boolean
      - description: Limit concurrent workers (0 or omit for default).
        in: query
        name: maxWorkers
        type: integer
      - description: Custom Go template file for topology data export ('__full' for
          full export).
        in: query
        name: exportTemplate
        type: string
      - description: Comma-separated list of node names to deploy.
        in: query
        name: nodeFilter
        type: string
      - description: 'Skip post-deploy actions defined for nodes (default: false).'
        in: query
        name: skipPostDeploy
        type: boolean
      - description: 'Skip setting extended ACLs on lab directory (default: false).'
        in: query
        name: skipLabdirAcl
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Raw JSON output from 'clab deploy' (or plain text on error)
          schema:
            type: object
        "400":
          description: Invalid input (e.g., missing/both content/URL, invalid flags/params,
            invalid topology name)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (Attempting to reconfigure a lab owned by another
            user)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict (Lab already exists and reconfigure=false or not specified)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (e.g., file system errors, clab execution
            failed)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deploy Lab
      tags:
      - Labs
  /api/v1/labs/{labName}:
    delete:
      description: |-
        Destroys a lab by name, checking ownership via 'owner' field from clab inspect.
        Optionally cleans up the lab directory (~/.clab/<labname>) if 'cleanup=true' is passed and the API deployed it from content.
      parameters:
      - description: Name of the lab to destroy
        in: path
        name: labName
        required: true
        type: string
      - description: 'Remove lab directory (~/.clab/<labname>) after destroy (default:
          false)'
        in: query
        name: cleanup
        type: boolean
      - description: 'Attempt graceful shutdown of containers (default: false)'
        in: query
        name: graceful
        type: boolean
      - description: 'Keep the management network (default: false)'
        in: query
        name: keepMgmtNet
        type: boolean
      - description: Destroy only specific nodes (comma-separated)
        in: query
        name: nodeFilter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid lab name or node filter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Destroy Lab
      tags:
      - Labs
    get:
      description: Get details about a specific running lab, checking ownership via
        'owner' field. Supports '--details'.
      parameters:
      - description: Name of the lab to inspect
        in: path
        name: labName
        required: true
        type: string
      - description: Include full container details (like docker inspect)
        in: query
        name: details
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Raw JSON output if 'details=true' is used (structure matches
            'docker inspect')
          schema:
            type: object
        "400":
          description: Invalid lab name
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Inspect Lab
      tags:
      - Labs
    put:
      description: |-
        Redeploys a lab by name, effectively running destroy and then deploy. Checks ownership.
        Uses the original topology file path found during inspection. Optional flags are provided via query parameters.
      parameters:
      - description: Name of the lab to redeploy
        in: path
        name: labName
        required: true
        type: string
      - description: 'Remove containerlab artifacts before deploy (default: false)'
        in: query
        name: cleanup
        type: boolean
      - description: 'Attempt graceful shutdown of containers (default: false)'
        in: query
        name: graceful
        type: boolean
      - description: 'Generate graph during redeploy (default: false)'
        in: query
        name: graph
        type: boolean
      - description: Override management network name
        in: query
        name: network
        type: string
      - description: Override management network IPv4 subnet (CIDR)
        in: query
        name: ipv4Subnet
        type: string
      - description: Override management network IPv6 subnet (CIDR)
        in: query
        name: ipv6Subnet
        type: string
      - description: Limit concurrent workers (0 or omit for default).
        in: query
        name: maxWorkers
        type: integer
      - description: 'Keep the management network during destroy phase (default: false)'
        in: query
        name: keepMgmtNet
        type: boolean
      - description: 'Skip post-deploy actions defined for nodes (default: false)'
        in: query
        name: skipPostDeploy
        type: boolean
      - description: Custom Go template file for topology data export ('__full' for
          full export).
        in: query
        name: exportTemplate
        type: string
      - description: 'Skip setting extended ACLs on lab directory (default: false)'
        in: query
        name: skipLabdirAcl
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Raw output from 'clab redeploy'
          schema:
            type: object
        "400":
          description: Invalid lab name or query parameter options
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Redeploy Lab
      tags:
      - Labs
  /api/v1/labs/{labName}/exec:
    post:
      consumes:
      - application/json
      description: Executes a command on nodes within a specific lab. Checks ownership.
        Supports filtering by a single node name.
      parameters:
      - description: Name of the lab where the command should be executed
        in: path
        name: labName
        required: true
        type: string
      - description: Execute only on this specific node (must match container name,
          e.g., clab-my-test-lab-srl1)
        in: query
        name: nodeFilter
        type: string
      - description: Output format ('plain' or 'json'). Default is 'json'.
        in: query
        name: format
        type: string
      - description: Command to execute
        in: body
        name: exec_request
        required: true
        schema:
          $ref: '#/definitions/models.ExecRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Plain text output (if format=plain)
          schema:
            type: string
        "400":
          description: Invalid input (lab name, node filter, format, request body)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Execute Command in Lab
      tags:
      - Labs
  /api/v1/labs/{labName}/interfaces:
    get:
      description: Get network interface details for nodes in a specific lab, checking
        ownership.
      parameters:
      - description: Name of the lab
        in: path
        name: labName
        required: true
        type: string
      - description: Filter interfaces for a specific node name
        in: query
        name: node
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: JSON output from 'clab inspect interfaces'
          schema:
            items:
              $ref: '#/definitions/models.NodeInterfaceInfo'
            type: array
        "400":
          description: Invalid lab name or node name
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Lab Interfaces
      tags:
      - Labs
  /api/v1/labs/{labName}/nodes/{nodeName}/interfaces/{interfaceName}/netem:
    delete:
      description: Removes all network impairments from a specific interface of a
        node (container) within a lab. Checks container ownership.
      parameters:
      - description: Name of the lab
        in: path
        name: labName
        required: true
        type: string
      - description: Full name of the container (node)
        in: path
        name: nodeName
        required: true
        type: string
      - description: Name of the interface within the container
        in: path
        name: interfaceName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Impairments reset successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid input (lab/container/interface name)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab, container (node), or interface not found / not owned
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reset Network Emulation
      tags:
      - Tools - Netem
    put:
      consumes:
      - application/json
      description: Sets network impairments (delay, jitter, loss, rate, corruption)
        on a specific interface of a node (container) within a lab. Checks container
        ownership.
      parameters:
      - description: Name of the lab
        in: path
        name: labName
        required: true
        type: string
      - description: Full name of the container (node)
        in: path
        name: nodeName
        required: true
        type: string
      - description: Name of the interface within the container
        in: path
        name: interfaceName
        required: true
        type: string
      - description: Network Emulation Parameters
        in: body
        name: netem_params
        required: true
        schema:
          $ref: '#/definitions/models.NetemSetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Impairments set successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid input (lab/container/interface name, netem params)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab, container (node), or interface not found / not owned
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set Network Emulation
      tags:
      - Tools - Netem
  /api/v1/labs/{labName}/nodes/{nodeName}/logs:
    get:
      description: Get logs from a specific lab node (container). When follow=true,
        logs will stream until client disconnects or 30-minute timeout.
      parameters:
      - description: Name of the lab
        in: path
        name: labName
        required: true
        type: string
      - description: Full name of the container (node)
        in: path
        name: nodeName
        required: true
        type: string
      - description: Number of lines to show from the end of logs (default all)
        in: query
        name: tail
        type: integer
      - description: 'Follow log output (stream logs). Note: In Swagger UI, streaming
          may not display correctly.'
        in: query
        name: follow
        type: boolean
      - description: Output format ('plain' or 'json'). Default is 'plain'. When follow=true,
          only 'plain' format is supported.
        in: query
        name: format
        type: string
      produces:
      - text/plain
      - application/json
      - application/octet-stream
      responses:
        "200":
          description: Container logs (when format=json)
          schema:
            $ref: '#/definitions/models.LogsResponse'
        "400":
          description: Invalid input (lab name, node filter, etc.)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (not owner of the lab)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab or node not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Node Logs
      tags:
      - Logs
  /api/v1/labs/{labName}/nodes/{nodeName}/netem:
    get:
      description: Shows network impairments for all interfaces on a specific node
        (container) within a lab. Checks container ownership.
      parameters:
      - description: Name of the lab
        in: path
        name: labName
        required: true
        type: string
      - description: Full name of the container (node)
        in: path
        name: nodeName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Current network emulation parameters
          schema:
            $ref: '#/definitions/models.NetemShowResponse'
        "400":
          description: Invalid input (lab/container name)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab or container (node) not found / not owned
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Show Network Emulation
      tags:
      - Tools - Netem
  /api/v1/labs/{labName}/nodes/{nodeName}/ssh:
    post:
      consumes:
      - application/json
      description: Creates temporary SSH access to a specific lab node, returning
        connection details
      parameters:
      - description: Lab name
        in: path
        name: labName
        required: true
        type: string
      - description: Full container name of the node (e.g., clab-my-lab-srl1)
        in: path
        name: nodeName
        required: true
        type: string
      - description: SSH access parameters
        in: body
        name: sshRequest
        schema:
          $ref: '#/definitions/models.SSHAccessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: SSH connection details
          schema:
            $ref: '#/definitions/models.SSHAccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (not owner of the lab)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab or node not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Request SSH Access to Lab Node
      tags:
      - SSH Access
  /api/v1/labs/{labName}/save:
    post:
      description: Saves the running configuration for nodes in a specific lab. Checks
        ownership.
      parameters:
      - description: Name of the lab to save configuration for
        in: path
        name: labName
        required: true
        type: string
      - description: Save config only for specific nodes (comma-separated)
        in: query
        name: nodeFilter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Configuration save command executed, includes detailed output.
          schema:
            $ref: '#/definitions/models.SaveConfigResponse'
        "400":
          description: Invalid lab name or node filter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Save Lab Configuration
      tags:
      - Labs
  /api/v1/labs/archive:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Deploys a containerlab topology provided as a .zip or .tar.gz archive. The archive must contain the .clab.yml file and any necessary bind-mount files/directories. The lab will be owned by the authenticated user.
        The lab name is taken from the 'labName' query parameter. The archive is extracted to the user's ~/.clab/<labName>/ directory.
        Deployment is DENIED if a lab with the target name already exists, UNLESS 'reconfigure=true' is specified AND the authenticated user owns the existing lab.
      parameters:
      - description: Lab archive (.zip or .tar.gz) containing topology file and bind
          mounts.
        in: formData
        name: labArchive
        required: true
        type: file
      - description: Name for the lab. This determines the extraction directory (~/.clab/<labName>).
        in: query
        name: labName
        required: true
        type: string
      - description: 'Allow overwriting an existing lab IF owned by the user (default:
          false).'
        in: query
        name: reconfigure
        type: boolean
      - description: Limit concurrent workers (0 or omit for default).
        in: query
        name: maxWorkers
        type: integer
      - description: Custom Go template file for topology data export ('__full' for
          full export).
        in: query
        name: exportTemplate
        type: string
      - description: Comma-separated list of node names to deploy.
        in: query
        name: nodeFilter
        type: string
      - description: 'Skip post-deploy actions defined for nodes (default: false).'
        in: query
        name: skipPostDeploy
        type: boolean
      - description: 'Skip setting extended ACLs on lab directory (default: false).'
        in: query
        name: skipLabdirAcl
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Raw JSON output from 'clab deploy' (or plain text on error)
          schema:
            type: object
        "400":
          description: Invalid input (e.g., missing archive, invalid labName, invalid
            archive format, missing topology file in archive)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (Attempting to reconfigure a lab owned by another
            user)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict (Lab already exists and reconfigure=false or not specified)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (e.g., file system errors, extraction
            errors, clab execution failed)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deploy Lab from Archive
      tags:
      - Labs
  /api/v1/ssh/sessions:
    get:
      description: Lists active SSH sessions. For regular users, shows only their
        sessions. Superusers can see all sessions by using the 'all' query parameter.
      parameters:
      - description: 'If true and user is superuser, shows sessions for all users
          (default: false)'
        in: query
        name: all
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of active SSH sessions
          schema:
            items:
              $ref: '#/definitions/models.SSHSessionInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (non-superuser attempting to list all sessions)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List SSH Sessions
      tags:
      - SSH Access
  /api/v1/ssh/sessions/{port}:
    delete:
      description: Terminates a specific SSH session by port
      parameters:
      - description: SSH session port to terminate
        in: path
        name: port
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Session terminated successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid port parameter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (not owner of the session)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Terminate SSH Session
      tags:
      - SSH Access
  /api/v1/tools/certs/ca:
    post:
      consumes:
      - application/json
      description: Creates a CA certificate and private key. Requires SUPERUSER privileges.
        Files are stored in the user's ~/.clab/certs/<ca_name>/ directory on the server.
      parameters:
      - description: CA Generation Parameters
        in: body
        name: ca_request
        required: true
        schema:
          $ref: '#/definitions/models.CACreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: CA created successfully
          schema:
            $ref: '#/definitions/models.CertResponse'
        "400":
          description: Invalid input parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (filesystem, clab execution)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Certificate Authority (CA)
      tags:
      - Tools - Certificates
  /api/v1/tools/certs/sign:
    post:
      consumes:
      - application/json
      description: Creates a certificate/key and signs it with a previously generated
        CA. Requires SUPERUSER privileges. Files are stored in the user's ~/.clab/certs/<ca_name>/
        directory.
      parameters:
      - description: Certificate Signing Parameters
        in: body
        name: sign_request
        required: true
        schema:
          $ref: '#/definitions/models.CertSignRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Certificate signed successfully
          schema:
            $ref: '#/definitions/models.CertResponse'
        "400":
          description: Invalid input parameters (name, hosts, CA name, etc.)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Specified CA not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (filesystem, clab execution)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Sign Certificate
      tags:
      - Tools - Certificates
  /api/v1/tools/disable-tx-offload:
    post:
      consumes:
      - application/json
      description: Disables TX checksum offload for the eth0 interface of a specific
        container. Requires SUPERUSER privileges.
      parameters:
      - description: Container Name
        in: body
        name: tx_request
        required: true
        schema:
          $ref: '#/definitions/models.DisableTxOffloadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Offload disabled successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Disable TX Checksum Offload
      tags:
      - Tools
  /api/v1/tools/veth:
    post:
      consumes:
      - application/json
      description: Creates a virtual Ethernet (vEth) pair between two specified endpoints
        (container, host, bridge, ovs-bridge). Requires SUPERUSER privileges.
      parameters:
      - description: vEth Creation Parameters
        in: body
        name: veth_request
        required: true
        schema:
          $ref: '#/definitions/models.VethCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: vEth pair created successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid input parameters (endpoints, MTU)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (clab execution failed)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create vEth Pair
      tags:
      - Tools - vEth
  /api/v1/tools/vxlan:
    delete:
      description: 'Deletes VxLAN tunnel interfaces matching a given prefix (default:
        ''vx-''). Requires SUPERUSER privileges.'
      parameters:
      - default: vx-
        description: Prefix of VxLAN interfaces to delete
        in: query
        name: prefix
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: VxLAN tunnels deleted successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid prefix format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (clab execution failed)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete VxLAN Tunnels by Prefix
      tags:
      - Tools - VxLAN
    post:
      consumes:
      - application/json
      description: Creates a VxLAN tunnel interface and sets up tc rules for traffic
        redirection. Requires SUPERUSER privileges.
      parameters:
      - description: VxLAN Creation Parameters
        in: body
        name: vxlan_request
        required: true
        schema:
          $ref: '#/definitions/models.VxlanCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: VxLAN tunnel created successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid input parameters (remote, link, id, port, etc.)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized (JWT)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (clab execution failed)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create VxLAN Tunnel
      tags:
      - Tools - VxLAN
  /api/v1/users:
    get:
      description: Get a list of all users in the system. Requires superuser privileges.
      produces:
      - application/json
      responses:
        "200":
          description: List of user details
          schema:
            items:
              $ref: '#/definitions/models.UserDetails'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List All Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new system user. Requires superuser privileges.
      parameters:
      - description: User creation details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - Users
  /api/v1/users/{username}:
    delete:
      description: Delete a user from the system. Requires superuser privileges.
      parameters:
      - description: Username to delete
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (User is not a superuser)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - Users
    get:
      description: Get detailed information about a specific user. Requires superuser
        privileges or the user's own account.
      parameters:
      - description: Username to get details for
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.UserDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (Not superuser or not the user's own account)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User Details
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update information for an existing user. Requires superuser privileges
        or the user's own account.
      parameters:
      - description: Username to update
        in: path
        name: username
        required: true
        type: string
      - description: User details to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (Not superuser or not the user's own account)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Users
  /api/v1/users/{username}/password:
    put:
      consumes:
      - application/json
      description: Change password for a user. Requires superuser privileges or the
        user's own account.
      parameters:
      - description: Username to change password for
        in: path
        name: username
        required: true
        type: string
      - description: Password change details
        in: body
        name: passwordChange
        required: true
        schema:
          $ref: '#/definitions/models.PasswordChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized or incorrect current password
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden (Not superuser or not the user's own account)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change User Password
      tags:
      - Users
  /api/v1/version:
    get:
      description: Retrieves the installed containerlab version information by running
        'clab version'.
      produces:
      - application/json
      responses:
        "200":
          description: Containerlab version details
          schema:
            $ref: '#/definitions/models.VersionResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Containerlab Version
      tags:
      - Version
  /api/v1/version/check:
    get:
      description: Checks if a newer version of containerlab is available by running
        'clab version check'.
      produces:
      - application/json
      responses:
        "200":
          description: Result of the version check
          schema:
            $ref: '#/definitions/models.VersionCheckResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check for Containerlab Updates
      tags:
      - Version
  /health:
    get:
      description: Returns basic health status of the API server.
      produces:
      - application/json
      responses:
        "200":
          description: Basic health information
          schema:
            $ref: '#/definitions/models.HealthResponse'
      summary: Get API Server Basic Health
      tags:
      - Health
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (PAM config?)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login
      tags:
      - Auth
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
