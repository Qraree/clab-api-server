// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://swagger.io/support/",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/generate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a containerlab topology file based on CLOS definitions. Optionally deploys it, setting the owner to the authenticated user.\nDeployment is DENIED if a lab with the target name already exists.\nThe 'images' and 'licenses' fields expect a map where the key is the node 'kind' and the value is the corresponding image or license path (e.g., {\"nokia_srlinux\": \"ghcr.io/...\"}).\nIf Deploy=true, the topology is saved to the user's ~/.clab/\u003clabName\u003e/ directory before deployment, and the 'outputFile' field is ignored.\nIf Deploy=false and 'outputFile' is empty, YAML is returned directly.\nIf Deploy=false and 'outputFile' is set, the file is saved to that path on the server (requires API server write permissions).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Topology Generation"
                ],
                "summary": "Generate Topology",
                "parameters": [
                    {
                        "description": "Topology generation parameters. The 'images' field maps kind to image path.",
                        "name": "generate_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Generation successful (YAML or deploy output)",
                        "schema": {
                            "$ref": "#/definitions/models.GenerateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (Lab already exists and Deploy=true)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/health/metrics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns detailed CPU, memory, and disk metrics for the API server. Requires SUPERUSER privileges.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Get Detailed System Metrics",
                "responses": {
                    "200": {
                        "description": "System metrics",
                        "schema": {
                            "$ref": "#/definitions/models.MetricsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error gathering metrics",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about all running labs, filtered by the 'owner' field matching the authenticated user (unless user is in SUPERUSER_GROUP).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List All Labs",
                "responses": {
                    "200": {
                        "description": "Filtered JSON output from 'clab inspect --all'",
                        "schema": {
                            "$ref": "#/definitions/models.ClabInspectOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploys a containerlab topology. Requires EITHER 'topologyContent' OR 'topologySourceUrl' in the request body, but not both. The lab will be owned by the authenticated user.\nThe 'topologyContent' field accepts a JSON object for the topology structure.\nDeployment is DENIED if a lab with the target name already exists, UNLESS 'reconfigure=true' is specified AND the authenticated user owns the existing lab.\nOptional deployment flags are provided as query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Deploy Lab",
                "parameters": [
                    {
                        "description": "Deployment Source: Provide 'topologyContent' OR 'topologySourceUrl'.",
                        "name": "deploy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeployRequest"
                        }
                    },
                    {
                        "type": "boolean",
                        "description": "Allow overwriting an existing lab IF owned by the user (default: false).",
                        "name": "reconfigure",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit concurrent workers (0 or omit for default).",
                        "name": "maxWorkers",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Custom Go template file for topology data export ('__full' for full export).",
                        "name": "exportTemplate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of node names to deploy.",
                        "name": "nodeFilter",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip post-deploy actions defined for nodes (default: false).",
                        "name": "skipPostDeploy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip setting extended ACLs on lab directory (default: false).",
                        "name": "skipLabdirAcl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab deploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing/both content/URL, invalid flags/params, invalid topology name)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Attempting to reconfigure a lab owned by another user)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (Lab already exists and reconfigure=false or not specified)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., file system errors, clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/archive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploys a containerlab topology provided as a .zip or .tar.gz archive. The archive must contain the .clab.yml file and any necessary bind-mount files/directories. The lab will be owned by the authenticated user.\nThe lab name is taken from the 'labName' query parameter. The archive is extracted to the user's ~/.clab/\u003clabName\u003e/ directory.\nDeployment is DENIED if a lab with the target name already exists, UNLESS 'reconfigure=true' is specified AND the authenticated user owns the existing lab.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Deploy Lab from Archive",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Lab archive (.zip or .tar.gz) containing topology file and bind mounts.",
                        "name": "labArchive",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name for the lab. This determines the extraction directory (~/.clab/\u003clabName\u003e).",
                        "name": "labName",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Allow overwriting an existing lab IF owned by the user (default: false).",
                        "name": "reconfigure",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit concurrent workers (0 or omit for default).",
                        "name": "maxWorkers",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Custom Go template file for topology data export ('__full' for full export).",
                        "name": "exportTemplate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of node names to deploy.",
                        "name": "nodeFilter",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip post-deploy actions defined for nodes (default: false).",
                        "name": "skipPostDeploy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip setting extended ACLs on lab directory (default: false).",
                        "name": "skipLabdirAcl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab deploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing archive, invalid labName, invalid archive format, missing topology file in archive)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Attempting to reconfigure a lab owned by another user)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict (Lab already exists and reconfigure=false or not specified)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., file system errors, extraction errors, clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about a specific running lab, checking ownership via 'owner' field. Supports '--details'.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Inspect Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to inspect",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include full container details (like docker inspect)",
                        "name": "details",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output if 'details=true' is used (structure matches 'docker inspect')",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Redeploys a lab by name, effectively running destroy and then deploy. Checks ownership.\nUses the original topology file path found during inspection. Optional flags are provided via query parameters.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Redeploy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to redeploy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Remove containerlab artifacts before deploy (default: false)",
                        "name": "cleanup",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Attempt graceful shutdown of containers (default: false)",
                        "name": "graceful",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Generate graph during redeploy (default: false)",
                        "name": "graph",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Override management network name",
                        "name": "network",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Override management network IPv4 subnet (CIDR)",
                        "name": "ipv4Subnet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Override management network IPv6 subnet (CIDR)",
                        "name": "ipv6Subnet",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit concurrent workers (0 or omit for default).",
                        "name": "maxWorkers",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Keep the management network during destroy phase (default: false)",
                        "name": "keepMgmtNet",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip post-deploy actions defined for nodes (default: false)",
                        "name": "skipPostDeploy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Custom Go template file for topology data export ('__full' for full export).",
                        "name": "exportTemplate",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip setting extended ACLs on lab directory (default: false)",
                        "name": "skipLabdirAcl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw output from 'clab redeploy'",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or query parameter options",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Destroys a lab by name, checking ownership via 'owner' field from clab inspect.\nOptionally cleans up the lab directory (~/.clab/\u003clabname\u003e) if 'cleanup=true' is passed and the API deployed it from content.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Destroy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to destroy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Remove lab directory (~/.clab/\u003clabname\u003e) after destroy (default: false)",
                        "name": "cleanup",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Attempt graceful shutdown of containers (default: false)",
                        "name": "graceful",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Keep the management network (default: false)",
                        "name": "keepMgmtNet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destroy only specific nodes (comma-separated)",
                        "name": "nodeFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node filter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/exec": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes a command on nodes within a specific lab. Checks ownership. Supports filtering by a single node name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Execute Command in Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab where the command should be executed",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Execute only on this specific node (must match container name, e.g., clab-my-test-lab-srl1)",
                        "name": "nodeFilter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Output format ('plain' or 'json'). Default is 'json'.",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "description": "Command to execute",
                        "name": "exec_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ExecRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plain text output (if format=plain)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab name, node filter, format, request body)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/interfaces": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get network interface details for nodes in a specific lab, checking ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List Lab Interfaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter interfaces for a specific node name",
                        "name": "node",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON output from 'clab inspect interfaces'",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NodeInterfaceInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/nodes/{nodeName}/interfaces/{interfaceName}/netem": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets network impairments (delay, jitter, loss, rate, corruption) on a specific interface of a node (container) within a lab. Checks container ownership.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Netem"
                ],
                "summary": "Set Network Emulation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full name of the container (node)",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the interface within the container",
                        "name": "interfaceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Network Emulation Parameters",
                        "name": "netem_params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NetemSetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Impairments set successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab/container/interface name, netem params)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab, container (node), or interface not found / not owned",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes all network impairments from a specific interface of a node (container) within a lab. Checks container ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Netem"
                ],
                "summary": "Reset Network Emulation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full name of the container (node)",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the interface within the container",
                        "name": "interfaceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Impairments reset successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab/container/interface name)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab, container (node), or interface not found / not owned",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/nodes/{nodeName}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get logs from a specific lab node (container). When follow=true, logs will stream until client disconnects or 30-minute timeout.",
                "produces": [
                    "text/plain",
                    "application/json",
                    "application/octet-stream"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Get Node Logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full name of the container (node)",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of lines to show from the end of logs (default all)",
                        "name": "tail",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Follow log output (stream logs). Note: In Swagger UI, streaming may not display correctly.",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Output format ('plain' or 'json'). Default is 'plain'. When follow=true, only 'plain' format is supported.",
                        "name": "format",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container logs (when format=json)",
                        "schema": {
                            "$ref": "#/definitions/models.LogsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab name, node filter, etc.)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (not owner of the lab)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab or node not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/nodes/{nodeName}/netem": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Shows network impairments for all interfaces on a specific node (container) within a lab. Checks container ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Netem"
                ],
                "summary": "Show Network Emulation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full name of the container (node)",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current network emulation parameters",
                        "schema": {
                            "$ref": "#/definitions/models.NetemShowResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab/container name)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab or container (node) not found / not owned",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/nodes/{nodeName}/ssh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates temporary SSH access to a specific lab node, returning connection details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH Access"
                ],
                "summary": "Request SSH Access to Lab Node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lab name",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Full container name of the node (e.g., clab-my-lab-srl1)",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SSH access parameters",
                        "name": "sshRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.SSHAccessRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSH connection details",
                        "schema": {
                            "$ref": "#/definitions/models.SSHAccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (not owner of the lab)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab or node not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/save": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Saves the running configuration for nodes in a specific lab. Checks ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Save Lab Configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to save configuration for",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Save config only for specific nodes (comma-separated)",
                        "name": "nodeFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration save command executed, includes detailed output.",
                        "schema": {
                            "$ref": "#/definitions/models.SaveConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node filter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/ssh/sessions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Lists active SSH sessions. For regular users, shows only their sessions. Superusers can see all sessions by using the 'all' query parameter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH Access"
                ],
                "summary": "List SSH Sessions",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If true and user is superuser, shows sessions for all users (default: false)",
                        "name": "all",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active SSH sessions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SSHSessionInfo"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (non-superuser attempting to list all sessions)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/ssh/sessions/{port}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Terminates a specific SSH session by port",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SSH Access"
                ],
                "summary": "Terminate SSH Session",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SSH session port to terminate",
                        "name": "port",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session terminated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid port parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (not owner of the session)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/certs/ca": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a CA certificate and private key. Requires SUPERUSER privileges. Files are stored in the user's ~/.clab/certs/\u003cca_name\u003e/ directory on the server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Certificates"
                ],
                "summary": "Create Certificate Authority (CA)",
                "parameters": [
                    {
                        "description": "CA Generation Parameters",
                        "name": "ca_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CACreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CA created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.CertResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (filesystem, clab execution)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/certs/sign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a certificate/key and signs it with a previously generated CA. Requires SUPERUSER privileges. Files are stored in the user's ~/.clab/certs/\u003cca_name\u003e/ directory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Certificates"
                ],
                "summary": "Sign Certificate",
                "parameters": [
                    {
                        "description": "Certificate Signing Parameters",
                        "name": "sign_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CertSignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Certificate signed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.CertResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters (name, hosts, CA name, etc.)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Specified CA not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (filesystem, clab execution)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/disable-tx-offload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Disables TX checksum offload for the eth0 interface of a specific container. Requires SUPERUSER privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools"
                ],
                "summary": "Disable TX Checksum Offload",
                "parameters": [
                    {
                        "description": "Container Name",
                        "name": "tx_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DisableTxOffloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Offload disabled successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/veth": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a virtual Ethernet (vEth) pair between two specified endpoints (container, host, bridge, ovs-bridge). Requires SUPERUSER privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - vEth"
                ],
                "summary": "Create vEth Pair",
                "parameters": [
                    {
                        "description": "vEth Creation Parameters",
                        "name": "veth_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VethCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "vEth pair created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters (endpoints, MTU)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/vxlan": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a VxLAN tunnel interface and sets up tc rules for traffic redirection. Requires SUPERUSER privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - VxLAN"
                ],
                "summary": "Create VxLAN Tunnel",
                "parameters": [
                    {
                        "description": "VxLAN Creation Parameters",
                        "name": "vxlan_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VxlanCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VxLAN tunnel created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters (remote, link, id, port, etc.)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes VxLAN tunnel interfaces matching a given prefix (default: 'vx-'). Requires SUPERUSER privileges.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - VxLAN"
                ],
                "summary": "Delete VxLAN Tunnels by Prefix",
                "parameters": [
                    {
                        "type": "string",
                        "default": "vx-",
                        "description": "Prefix of VxLAN interfaces to delete",
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VxLAN tunnels deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid prefix format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all users in the system. Requires superuser privileges.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List All Users",
                "responses": {
                    "200": {
                        "description": "List of user details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserDetails"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new system user. Requires superuser privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "User creation details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{username}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific user. Requires superuser privileges or the user's own account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to get details for",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/models.UserDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not superuser or not the user's own account)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update information for an existing user. Requires superuser privileges or the user's own account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to update",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not superuser or not the user's own account)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user from the system. Requires superuser privileges.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to delete",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{username}/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change password for a user. Requires superuser privileges or the user's own account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change User Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to change password for",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Password change details",
                        "name": "passwordChange",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PasswordChangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or incorrect current password",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Not superuser or not the user's own account)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/version": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the installed containerlab version information by running 'clab version'.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Version"
                ],
                "summary": "Get Containerlab Version",
                "responses": {
                    "200": {
                        "description": "Containerlab version details",
                        "schema": {
                            "$ref": "#/definitions/models.VersionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/version/check": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Checks if a newer version of containerlab is available by running 'clab version check'.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Version"
                ],
                "summary": "Check for Containerlab Updates",
                "responses": {
                    "200": {
                        "description": "Result of the version check",
                        "schema": {
                            "$ref": "#/definitions/models.VersionCheckResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns basic health status of the API server.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Get API Server Basic Health",
                "responses": {
                    "200": {
                        "description": "Basic health information",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (PAM config?)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CACreateRequest": {
            "type": "object",
            "properties": {
                "commonName": {
                    "description": "Defaults to \"containerlab.dev\"",
                    "type": "string",
                    "example": "ca.example.com"
                },
                "country": {
                    "description": "Defaults to \"Internet\"",
                    "type": "string",
                    "example": "US"
                },
                "expiry": {
                    "description": "Duration string, defaults to \"87600h\" (10 years)",
                    "type": "string",
                    "example": "8760h"
                },
                "locality": {
                    "description": "Defaults to \"Server\"",
                    "type": "string",
                    "example": "City"
                },
                "name": {
                    "description": "Defaults to \"ca\" if empty",
                    "type": "string",
                    "example": "my-root-ca"
                },
                "orgUnit": {
                    "description": "Defaults to \"Containerlab Tools\"",
                    "type": "string",
                    "example": "IT"
                },
                "organization": {
                    "description": "Defaults to \"Containerlab\"",
                    "type": "string",
                    "example": "MyOrg"
                }
            }
        },
        "models.CPUMetrics": {
            "type": "object",
            "properties": {
                "loadAvg1": {
                    "description": "1-minute load average",
                    "type": "number"
                },
                "loadAvg15": {
                    "description": "15-minute load average",
                    "type": "number"
                },
                "loadAvg5": {
                    "description": "5-minute load average",
                    "type": "number"
                },
                "numCPU": {
                    "description": "Number of CPUs/cores",
                    "type": "integer"
                },
                "processPercent": {
                    "description": "This process's CPU usage",
                    "type": "number"
                },
                "usagePercent": {
                    "description": "Overall CPU usage percentage",
                    "type": "number"
                }
            }
        },
        "models.CertResponse": {
            "type": "object",
            "properties": {
                "certPath": {
                    "description": "e.g., \"my-root-ca/my-root-ca.pem\" or \"my-root-ca/node1.example.com.pem\"",
                    "type": "string"
                },
                "csrPath": {
                    "description": "e.g., \"my-root-ca/my-root-ca.csr\" or \"my-root-ca/node1.example.com.csr\"",
                    "type": "string"
                },
                "keyPath": {
                    "description": "e.g., \"my-root-ca/my-root-ca.key\" or \"my-root-ca/node1.example.com.key\"",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.CertSignRequest": {
            "type": "object",
            "required": [
                "caName",
                "hosts",
                "name"
            ],
            "properties": {
                "caName": {
                    "description": "Name of the CA cert/key files (without .pem/.key) previously generated",
                    "type": "string",
                    "example": "my-root-ca"
                },
                "commonName": {
                    "description": "Defaults to Name if empty",
                    "type": "string",
                    "example": "node1.example.com"
                },
                "country": {
                    "description": "Defaults to \"Internet\"",
                    "type": "string",
                    "example": "US"
                },
                "hosts": {
                    "description": "SANs (DNS names or IPs), comma-separated in clab, array here",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keySize": {
                    "description": "Defaults to 2048",
                    "type": "integer",
                    "example": 4096
                },
                "locality": {
                    "description": "Defaults to \"Server\"",
                    "type": "string",
                    "example": "City"
                },
                "name": {
                    "description": "Required",
                    "type": "string",
                    "example": "node1.example.com"
                },
                "orgUnit": {
                    "description": "Defaults to \"Containerlab Tools\"",
                    "type": "string",
                    "example": "Nodes"
                },
                "organization": {
                    "description": "Defaults to \"Containerlab\"",
                    "type": "string",
                    "example": "MyOrg"
                }
            }
        },
        "models.ClabContainerInfo": {
            "type": "object",
            "properties": {
                "absLabPath": {
                    "description": "Absolute path to topology file",
                    "type": "string"
                },
                "container_id": {
                    "description": "Docker container ID (short)",
                    "type": "string"
                },
                "group": {
                    "description": "Group assigned in topology (Might not always be present)",
                    "type": "string"
                },
                "image": {
                    "description": "Container image used",
                    "type": "string"
                },
                "ipv4_address": {
                    "description": "Management IPv4 Address/Mask",
                    "type": "string"
                },
                "ipv6_address": {
                    "description": "Management IPv6 Address/Mask",
                    "type": "string"
                },
                "kind": {
                    "description": "e.g., \"linux\", \"nokia_srlinux\"",
                    "type": "string"
                },
                "labPath": {
                    "description": "Path to the topology file used (relative)",
                    "type": "string"
                },
                "lab_name": {
                    "description": "Name of the lab this node belongs to (redundant with map key but present)",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the container node (e.g., \"lab01-client1\")",
                    "type": "string"
                },
                "owner": {
                    "description": "OS user from clab inspect output (Used for authorization)",
                    "type": "string"
                },
                "state": {
                    "description": "e.g., \"running\"",
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"Up 18 hours\"",
                    "type": "string"
                }
            }
        },
        "models.ClabExecInternalResult": {
            "type": "object",
            "properties": {
                "cmd": {
                    "description": "The command and its arguments as executed",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "return-code": {
                    "description": "Exit code of the command inside the container",
                    "type": "integer"
                },
                "stderr": {
                    "description": "Standard error of the command",
                    "type": "string"
                },
                "stdout": {
                    "description": "Standard output of the command",
                    "type": "string"
                }
            }
        },
        "models.ClabInspectOutput": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/models.ClabContainerInfo"
                }
            }
        },
        "models.DeployRequest": {
            "type": "object",
            "properties": {
                "topologyContent": {
                    "description": "Option 1: Direct Topology Content.\nProvide the full containerlab topology YAML as a json string.\nIf this is provided, 'topologySourceUrl' MUST be empty.\n{\n\t\"topologyContent\": {\n\t  \"name\": \"your-lab-name\",\n\t  \"topology\": {\n\t\t\"kinds\": {\n\t\t  \"nokia_srlinux\": {\n\t\t\t\"type\": \"ixrd3\",\n\t\t\t\"image\": \"ghcr.io/nokia/srlinux\"\n\t\t  }\n\t\t},\n\t\t\"nodes\": {\n\t\t  \"srl1\": {\n\t\t\t\"kind\": \"nokia_srlinux\"\n\t\t  },\n\t\t  \"srl2\": {\n\t\t\t\"kind\": \"nokia_srlinux\"\n\t\t  }\n\t\t},\n\t\t\"links\": [\n\t\t  {\n\t\t\t\"endpoints\": [\n\t\t\t  \"srl1:e1-1\",\n\t\t\t  \"srl2:e1-1\"\n\t\t\t]\n\t\t  }\n\t\t]\n\t  }\n\t}\n  }",
                    "type": "object"
                },
                "topologySourceUrl": {
                    "description": "Option 2: Remote Topology Source URL.\nProvide a URL to a Git repository, a specific .clab.yml file in Git (github/gitlab), or a raw HTTP(S) URL.\nIf this is provided, 'topologyContent' MUST be empty.",
                    "type": "string"
                }
            }
        },
        "models.DisableTxOffloadRequest": {
            "type": "object",
            "required": [
                "containerName"
            ],
            "properties": {
                "containerName": {
                    "type": "string",
                    "example": "clab-my-lab-srl1"
                }
            }
        },
        "models.DiskMetrics": {
            "type": "object",
            "properties": {
                "freeDisk": {
                    "description": "Free disk space in bytes",
                    "type": "integer"
                },
                "path": {
                    "description": "Mount path (usually \"/\")",
                    "type": "string"
                },
                "totalDisk": {
                    "description": "Total disk space in bytes",
                    "type": "integer"
                },
                "usagePercent": {
                    "description": "Disk usage percentage",
                    "type": "number"
                },
                "usedDisk": {
                    "description": "Used disk space in bytes",
                    "type": "integer"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.ExecRequest": {
            "type": "object",
            "required": [
                "command"
            ],
            "properties": {
                "command": {
                    "type": "string",
                    "example": "ip addr show eth1"
                }
            }
        },
        "models.ExecResponse": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/models.ClabExecInternalResult"
                }
            }
        },
        "models.GenerateNodeTier": {
            "type": "object",
            "required": [
                "count"
            ],
            "properties": {
                "count": {
                    "description": "Number of nodes in this tier",
                    "type": "integer",
                    "minimum": 1,
                    "example": 4
                },
                "kind": {
                    "description": "Node kind (defaults to 'srl'/'nokia_srlinux' if omitted)",
                    "type": "string",
                    "example": "nokia_srlinux"
                },
                "type": {
                    "description": "Node type within the kind",
                    "type": "string",
                    "example": "ixrd3"
                }
            }
        },
        "models.GenerateRequest": {
            "type": "object",
            "required": [
                "name",
                "tiers"
            ],
            "properties": {
                "defaultKind": {
                    "type": "string",
                    "example": "nokia_srlinux"
                },
                "deploy": {
                    "type": "boolean",
                    "example": true
                },
                "groupPrefix": {
                    "type": "string",
                    "example": "clos-tier"
                },
                "images": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "nokia_srlinux": "ghcr.io/nokia/srlinux:latest"
                    }
                },
                "ipv4Subnet": {
                    "type": "string",
                    "example": "172.20.20.0/24"
                },
                "ipv6Subnet": {
                    "type": "string",
                    "example": "2001:172:20:20::/64"
                },
                "licenses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "nokia_srlinux": "/opt/licenses/srl.lic"
                    }
                },
                "managementNetwork": {
                    "type": "string",
                    "example": "clos-mgmt"
                },
                "maxWorkers": {
                    "type": "integer",
                    "example": 4
                },
                "name": {
                    "type": "string",
                    "example": "3-tier-clos"
                },
                "nodePrefix": {
                    "type": "string",
                    "example": "clos-node"
                },
                "outputFile": {
                    "type": "string",
                    "example": "clos.yml"
                },
                "tiers": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/models.GenerateNodeTier"
                    }
                }
            }
        },
        "models.GenerateResponse": {
            "type": "object",
            "properties": {
                "deployOutput": {
                    "description": "The output from the deploy command (only if Deploy=true). Can be JSON or plain text.\nUse swaggertype:\"object\" to represent json.RawMessage in Swagger.",
                    "type": "object"
                },
                "message": {
                    "description": "Message indicating success or failure.",
                    "type": "string"
                },
                "savedFilePath": {
                    "description": "Path where the file was saved (if Deploy=true, it's the path in the user's ~/.clab dir; if Deploy=false, it's the OutputFile path if provided).",
                    "type": "string"
                },
                "topologyYaml": {
                    "description": "The generated topology YAML (only if Deploy=false and OutputFile is empty).",
                    "type": "string"
                }
            }
        },
        "models.GenericSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.HealthResponse": {
            "type": "object",
            "properties": {
                "startTime": {
                    "description": "When the server started",
                    "type": "string"
                },
                "status": {
                    "description": "\"healthy\" or other status indicators",
                    "type": "string"
                },
                "uptime": {
                    "description": "Human-readable uptime",
                    "type": "string"
                },
                "version": {
                    "description": "API server version",
                    "type": "string"
                }
            }
        },
        "models.InterfaceInfo": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Interface alias (e.g., \"ethernet-1/1\", \"\" if none)",
                    "type": "string"
                },
                "ifindex": {
                    "description": "Interface index",
                    "type": "integer"
                },
                "mac": {
                    "description": "MAC Address",
                    "type": "string"
                },
                "mtu": {
                    "description": "MTU size",
                    "type": "integer"
                },
                "name": {
                    "description": "Interface name (e.g., \"eth0\", \"e1-1\")",
                    "type": "string"
                },
                "state": {
                    "description": "Interface state (e.g., \"up\", \"down\", \"unknown\")",
                    "type": "string"
                },
                "type": {
                    "description": "Interface type (e.g., \"veth\", \"device\", \"dummy\")",
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.LogsResponse": {
            "type": "object",
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "logs": {
                    "type": "string"
                }
            }
        },
        "models.MemMetrics": {
            "type": "object",
            "properties": {
                "availableMem": {
                    "description": "Available memory in bytes",
                    "type": "integer"
                },
                "processMemMB": {
                    "description": "This process's memory in MB",
                    "type": "number"
                },
                "processMemPct": {
                    "description": "This process's memory percentage",
                    "type": "number"
                },
                "totalMem": {
                    "description": "Total physical memory in bytes",
                    "type": "integer"
                },
                "usagePercent": {
                    "description": "Memory usage percentage",
                    "type": "number"
                },
                "usedMem": {
                    "description": "Used physical memory in bytes",
                    "type": "integer"
                }
            }
        },
        "models.Metrics": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU usage metrics",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CPUMetrics"
                        }
                    ]
                },
                "disk": {
                    "description": "Disk usage metrics",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DiskMetrics"
                        }
                    ]
                },
                "mem": {
                    "description": "Memory usage metrics",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MemMetrics"
                        }
                    ]
                }
            }
        },
        "models.MetricsResponse": {
            "type": "object",
            "properties": {
                "metrics": {
                    "description": "Detailed system metrics",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Metrics"
                        }
                    ]
                },
                "serverInfo": {
                    "description": "Basic server information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ServerInfo"
                        }
                    ]
                }
            }
        },
        "models.NetemInterfaceInfo": {
            "type": "object",
            "properties": {
                "corruption": {
                    "description": "Percentage (might be missing in older clab versions)",
                    "type": "number"
                },
                "delay": {
                    "description": "Duration string or empty",
                    "type": "string"
                },
                "interface": {
                    "description": "Interface name",
                    "type": "string"
                },
                "jitter": {
                    "description": "Duration string or empty",
                    "type": "string"
                },
                "packet_loss": {
                    "description": "Percentage",
                    "type": "number"
                },
                "rate": {
                    "description": "Kbit/s",
                    "type": "integer"
                }
            }
        },
        "models.NetemSetRequest": {
            "type": "object",
            "properties": {
                "corruption": {
                    "description": "Percentage (0.0 to 100.0)",
                    "type": "number",
                    "example": 0.1
                },
                "delay": {
                    "description": "Duration string (e.g., \"100ms\", \"1s\")",
                    "type": "string",
                    "example": "50ms"
                },
                "jitter": {
                    "description": "Duration string, requires Delay",
                    "type": "string",
                    "example": "5ms"
                },
                "loss": {
                    "description": "Percentage (0.0 to 100.0)",
                    "type": "number",
                    "example": 10.5
                },
                "rate": {
                    "description": "Kbit/s (non-negative integer)",
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "models.NetemShowResponse": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/models.NetemInterfaceInfo"
                }
            }
        },
        "models.NodeInterfaceInfo": {
            "type": "object",
            "properties": {
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InterfaceInfo"
                    }
                },
                "name": {
                    "description": "Name of the container node",
                    "type": "string"
                }
            }
        },
        "models.PasswordChangeRequest": {
            "type": "object",
            "required": [
                "newPassword"
            ],
            "properties": {
                "currentPassword": {
                    "description": "Required if not superuser",
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "models.SSHAccessRequest": {
            "type": "object",
            "properties": {
                "duration": {
                    "description": "How long the access should be valid for (e.g., \"1h\", \"30m\")",
                    "type": "string"
                },
                "port": {
                    "description": "Which internal node port shoul be open",
                    "type": "integer"
                },
                "sshUsername": {
                    "description": "Optional override for container's SSH user",
                    "type": "string"
                }
            }
        },
        "models.SSHAccessResponse": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "Example SSH command",
                    "type": "string"
                },
                "expiration": {
                    "description": "When this access expires",
                    "type": "string"
                },
                "host": {
                    "description": "API server's hostname or IP",
                    "type": "string"
                },
                "port": {
                    "description": "Allocated port on API server",
                    "type": "integer"
                },
                "username": {
                    "description": "Username to use for SSH",
                    "type": "string"
                }
            }
        },
        "models.SSHSessionInfo": {
            "type": "object",
            "properties": {
                "created": {
                    "description": "When this access was created",
                    "type": "string"
                },
                "expiration": {
                    "description": "When this access expires",
                    "type": "string"
                },
                "labName": {
                    "description": "Lab name",
                    "type": "string"
                },
                "nodeName": {
                    "description": "Node name",
                    "type": "string"
                },
                "port": {
                    "description": "Allocated port on API server",
                    "type": "integer"
                },
                "username": {
                    "description": "SSH username",
                    "type": "string"
                }
            }
        },
        "models.SaveConfigResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating overall success.",
                    "type": "string"
                },
                "output": {
                    "description": "Detailed output from the 'clab save' command (often from stderr).",
                    "type": "string"
                }
            }
        },
        "models.ServerInfo": {
            "type": "object",
            "properties": {
                "startTime": {
                    "description": "When the server started",
                    "type": "string"
                },
                "uptime": {
                    "description": "Human-readable uptime",
                    "type": "string"
                },
                "version": {
                    "description": "API server version",
                    "type": "string"
                }
            }
        },
        "models.UserCreateRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isSuperuser": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "shell": {
                    "description": "Default to /bin/bash if empty",
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserDetails": {
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "Full name from GECOS field",
                    "type": "string"
                },
                "gid": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "homeDir": {
                    "type": "string"
                },
                "isApiUser": {
                    "type": "boolean"
                },
                "isSuperuser": {
                    "type": "boolean"
                },
                "shell": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isSuperuser": {
                    "type": "boolean"
                },
                "shell": {
                    "type": "string"
                }
            }
        },
        "models.VersionCheckResponse": {
            "type": "object",
            "properties": {
                "checkResult": {
                    "description": "Raw output string from 'clab version check'.",
                    "type": "string",
                    "example": "🎉 A newer containerlab version (0.62.2) is available!\nRelease notes: https://containerlab.dev/rn/0.62/#0622\nRun 'sudo clab version upgrade' or see https://containerlab.dev/install/ for installation options."
                }
            }
        },
        "models.VersionResponse": {
            "type": "object",
            "properties": {
                "versionInfo": {
                    "description": "Raw output string from 'clab version'.",
                    "type": "string",
                    "example": "version: 0.50.0\ncommit: 1234abcd\ndate: 2024-01-15T10:00:00Z\ngithub: https://github.com/srl-labs/containerlab\nrelease notes: https://containerlab.dev/rn/0.50/"
                }
            }
        },
        "models.VethCreateRequest": {
            "type": "object",
            "required": [
                "aEndpoint",
                "bEndpoint"
            ],
            "properties": {
                "aEndpoint": {
                    "description": "Endpoint A definition. Format: \u003cnode-name\u003e:\u003cinterface-name\u003e OR \u003ckind\u003e:\u003cnode-name\u003e:\u003cinterface-name\u003e\nExample: \"clab-demo-node1:eth1\" or \"bridge:br-1:br-eth1\" or \"host:veth-eth1\"",
                    "type": "string",
                    "example": "clab-demo-node1:eth1"
                },
                "bEndpoint": {
                    "description": "Endpoint B definition. Format: \u003cnode-name\u003e:\u003cinterface-name\u003e OR \u003ckind\u003e:\u003cnode-name\u003e:\u003cinterface-name\u003e\nExample: \"clab-demo-node2:eth1\" or \"ovs-bridge:ovsbr-1:br-eth1\"",
                    "type": "string",
                    "example": "clab-demo-node2:eth1"
                },
                "mtu": {
                    "description": "MTU for the vEth pair. Defaults to 9500 if omitted.",
                    "type": "integer",
                    "example": 1500
                }
            }
        },
        "models.VxlanCreateRequest": {
            "type": "object",
            "required": [
                "link",
                "remote"
            ],
            "properties": {
                "dev": {
                    "description": "Optional: Linux device to use for the tunnel source. Auto-detected if omitted.",
                    "type": "string",
                    "example": "eth0"
                },
                "id": {
                    "description": "VxLAN Network Identifier (VNI). Defaults to 10 if omitted.",
                    "type": "integer",
                    "example": 100
                },
                "link": {
                    "description": "Name of the existing interface in the root namespace to bridge traffic with.",
                    "type": "string",
                    "example": "srl_e1-1"
                },
                "mtu": {
                    "description": "Optional: MTU for the VxLAN interface. Auto-calculated if omitted.",
                    "type": "integer",
                    "example": 1400
                },
                "port": {
                    "description": "UDP port number for the VxLAN tunnel. Defaults to 14789 if omitted.",
                    "type": "integer",
                    "example": 4789
                },
                "remote": {
                    "description": "Remote VTEP IP address.",
                    "type": "string",
                    "example": "10.0.0.20"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Example: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{"http", "https"},
	Title:            "Containerlab API",
	Description:      "This is an API server to interact with Containerlab for authenticated Linux users. Runs clab commands as the API server's user. Requires PAM for authentication.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
